// Generated by CoffeeScript 1.10.0
(function() {
  var Qemu, qemu, randomstring, spawn;

  spawn = require('child_process').spawn;

  randomstring = require('randomstring');

  Qemu = (function() {
    function Qemu() {
      var i;
      this._vncPorts = [];
      this._vncActivePorts = [];
      this._qemu = [];
      i = 0;
      while (i <= 50) {
        this._vncPorts.push(i);
        i++;
      }
      return;
    }

    Qemu.prototype.start = function(config, callback) {
      var args, exe, password, port, self;
      exe = void 0;
      if (config.arch === 'x86_64') {
        exe = 'qemu-system-x86_64';
      }
      password = randomstring.generate({
        length: 12
      });
      port = this._port();
      self = this;
      args = ['-m', config.memory, '-vnc', ':' + port];
      if (config.diskImage) {
        args.push('-hda');
        args.push('img/' + config.diskImage);
      }
      if (config.cdrom) {
        args.push('-cdrom');
        args.push('iso/' + config.cdrom);
      }
      args.push('-snapshot');
      this._qemu[port] = spawn(exe, args);
      this._qemu[port].on('exit', function() {
        self._reallocatePort(port);
      });
      console.log(args);
      setTimeout((function() {
        callback(null, port, password);
      }), 1000);
    };

    Qemu.prototype.stop = function(port) {
      console.log('Killing qemu on port' + port);
      if (this._qemu[port]) {
        this._qemu[port].kill();
      }
    };

    Qemu.prototype._reallocatePort = function(port) {
      var index;
      console.log('port ' + port + ' reallocated');
      index = this._vncActivePorts.indexOf(port);
      if (index > -1) {
        this._vncActivePorts.splice(index, 1);
        this._vncPorts.push(port);
      }
    };

    Qemu.prototype._port = function() {
      var port;
      port = this._vncPorts.pop();
      this._vncActivePorts.push(port);
      return port;
    };

    return Qemu;

  })();

  qemu = new Qemu;

  module.exports = qemu;

}).call(this);
