// Generated by CoffeeScript 1.10.0
(function() {
  var MAX_SESSIONS, RfbHandler, TIMER, admin, api, app, availableSessions, bodyParser, clients, cookieParser, express, favicon, io, logger, partials, path, qemu, routes, vm;

  express = require('express');

  path = require('path');

  favicon = require('serve-favicon');

  logger = require('morgan');

  cookieParser = require('cookie-parser');

  bodyParser = require('body-parser');

  qemu = require('./qemu.js');

  RfbHandler = require('./rfb-handler.js');

  routes = require('./routes/index');

  partials = require('./routes/partials');

  api = require('./routes/api');

  admin = require('./routes/admin');

  app = express();

  io = require('socket.io')();

  MAX_SESSIONS = 20;

  availableSessions = MAX_SESSIONS;

  app.io = io;

  app.set('views', path.join(__dirname, 'views'));

  app.set('view engine', 'jade');

  app.use(logger('dev'));

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use(cookieParser());

  app.use(express["static"](path.join(__dirname, 'public')));

  app.use('/bower_components', express["static"](path.join(__dirname, 'bower_components')));

  app.use('/api', api);

  app.use('/admin', admin);

  app.use('/partials', partials);

  app.use('*', routes);

  TIMER = 600;

  clients = [];

  admin = io.of('/admin');

  admin.on('connection', function(socket) {
    socket.emit('available-sessions', {
      sessions: availableSessions
    });
    socket.emit('clients', clients);
  });

  vm = io.of('/vm');

  vm.on('connection', function(socket) {
    var connectionInfo, restartQemu, rfbHandler, stopQemu, timerCallback, vmRunning;
    connectionInfo = {
      ip: '',
      screenPort: 0,
      timer: 0
    };
    console.log("ciaone1");
    connectionInfo.ip = socket.request.connection.remoteAddress;
    rfbHandler = void 0;
    socket.emit('available-sessions', {
      sessions: availableSessions
    });
    vmRunning = false;
    connectionInfo.timer = TIMER;
    timerCallback = void 0;
    socket.on('start', function(config) {
      connectionInfo.osTitle = config.title;
      connectionInfo.memory = config.memory;
      clients.push(connectionInfo);
      admin.emit('new-client', connectionInfo);
      if (availableSessions) {
        console.log(vmRunning);
        if (vmRunning) {
          restartQemu(connectionInfo.screenPort);
        }
        if (connectionInfo.timer < TIMER) {
          connectionInfo.timer = 600;
        }
        qemu.start(config, function(err, port, password) {
          var rfbPort;
          timerCallback = setInterval((function() {
            connectionInfo.timer--;
            socket.emit('session-timer', {
              timer: connectionInfo.timer
            });
            if (connectionInfo.timer === 0) {
              stopQemu(connectionInfo.screenPort);
              socket.emit('session-expired');
            }
          }), 1000);
          connectionInfo.screenPort = port;
          rfbPort = port + 5900;
          console.log('qemu started on port ' + rfbPort);
          availableSessions--;
          vm.emit('available-sessions', {
            sessions: availableSessions
          });
          admin.emit('available-sessions', {
            sessions: availableSessions
          });
          vmRunning = true;
          console.log(vmRunning);
          rfbHandler = new RfbHandler(socket, rfbPort, password);
          rfbHandler.start();
        });
      }
    });
    stopQemu = function(screenPort) {
      clients.splice(clients.indexOf(connectionInfo), 1);
      admin.emit('remove-client', connectionInfo);
      rfbHandler.stop();
      qemu.stop(screenPort);
      if (vmRunning) {
        vmRunning = false;
        availableSessions++;
      }
      socket.emit('machine-closed');
      vm.emit('available-sessions', {
        sessions: availableSessions
      });
      admin.emit('available-sessions', {
        sessions: availableSessions
      });
    };
    restartQemu = function(screenPort) {
      stopQemu(screenPort);
      vmRunning = true;
      console.log('restarting on ' + screenPort);
    };
    socket.on('disconnect', function() {
      if (connectionInfo.screenPort) {
        console.log('Stopping qemu (disconnect) ' + connectionInfo.screenPort);
        stopQemu(connectionInfo.screenPort);
      }
    });
    socket.on('stop', function() {
      console.log('Stopping qemu (close) ' + connectionInfo.screenPort);
      stopQemu(connectionInfo.screenPort);
    });
  });

  process.on('uncaughtException', function(err) {
    console.log(err);
  });

  app.use(function(req, res, next) {
    var err;
    err = new Error('Not Found');
    err.status = 404;
    next(err);
  });

  if (app.get('env') === 'development') {
    app.use(function(err, req, res, next) {
      res.status(err.status || 500);
      res.render('error', {
        message: err.message,
        error: err
      });
    });
  }

  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: {}
    });
  });

  module.exports = app;

}).call(this);
