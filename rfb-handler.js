// Generated by CoffeeScript 1.10.0
(function() {
  var Jpeg, RfbHandler, rfb;

  rfb = require('rfb2');

  Jpeg = require('jpeg').Jpeg;


  /** Start a new connection with the qemu process */

  RfbHandler = (function() {
    function RfbHandler(socket, port, password) {
      this._socket = socket;
      this._port = port;
      this._password = password;
      console.log(port, password);
      this._initialized = false;
      return;
    }

    RfbHandler.prototype.start = function() {
      this._rfb = rfb.createConnection({
        host: '127.0.0.1',
        port: this._port
      });
      this._handleFrames();
      this._handleMouse();
      this._handleKeys();
    };

    RfbHandler.prototype.stop = function() {
      this._socket.removeAllListeners('keydown');
      this._socket.removeAllListeners('mouse');
      this._rfb.end();
    };

    RfbHandler.prototype._handleFrames = function() {
      var self;
      self = this;
      self._rfb.on('rect', function(rect) {
        var i, image, o, rgb;
        if (!self._initialized) {
          self._socket.emit('init', {
            width: rect.width,
            height: rect.height
          });
          self._initialized = true;
        }
        if (rect.encoding === rfb.encodings.raw) {
          rgb = new Buffer(rect.width * rect.height * 3);
          i = 0;
          o = 0;
          while (i < rect.data.length) {
            rgb[o++] = rect.data[i + 2];
            rgb[o++] = rect.data[i + 1];
            rgb[o++] = rect.data[i];
            i += 4;
          }
          image = new Jpeg(rgb, rect.width, rect.height, 'rgb');
          image.encode(function(img, err) {
            if (img && self._socket.connected) {
              self._socket.emit('frame', {
                x: rect.x,
                y: rect.y,
                width: rect.width,
                height: rect.height,
                image: img
              });
            }
          });
        }
      });
    };

    RfbHandler.prototype._handleMouse = function() {
      var self;
      self = this;
      self._socket.on('mouse', function(data) {
        self._rfb.pointerEvent(data.x, data.y, data.isDown);
      });
    };

    RfbHandler.prototype._handleKeys = function() {
      var self;
      self = this;
      self._socket.on('keydown', function(data) {
        self._rfb.keyEvent(data.key, 1);
      });
    };

    return RfbHandler;

  })();

  module.exports = RfbHandler;

}).call(this);
