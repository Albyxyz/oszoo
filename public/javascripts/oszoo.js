// Generated by CoffeeScript 1.10.0
(function() {
  var app;

  app = angular.module('OSZoo', ['ngMaterial', 'ngAnimate', 'ngRoute']);

  app.config(function($mdThemingProvider) {
    $mdThemingProvider.theme('default').primaryPalette('indigo').accentPalette('green');
  });

  app.service('os', function($http) {
    var deletea, failureHandler, getList, post, put, successHandler, url;
    url = '/api/os';
    getList = function() {
      var request;
      request = $http.get(url);
      return request.then(successHandler, failureHandler);
    };
    post = function(os) {
      var request;
      request = $http.post(url, os);
      return request.then(successHandler, failureHandler);
    };
    put = function(os) {
      var request;
      request = $http.put(url, os);
      return request.then(successHandler, failureHandler);
    };
    deletea = function(os) {
      var deleteUrl, request;
      deleteUrl = url + '/' + os.id;
      request = $http["delete"](deleteUrl);
      return request.then(successHandler, failureHandler);
    };
    successHandler = function(response) {
      return response.data;
    };
    failureHandler = function(response) {
      console.error('error getting the os list');
    };
    return {
      getList: getList,
      post: post,
      put: put,
      "delete": deletea
    };
  });

  app.factory('socket', function() {
    var socket, url;
    url = location.origin + '/vm';
    socket = io.connect(url);
    return socket;
  });

  app.controller('HomeController', function($scope, $mdSidenav, os, socket, $rootScope, $mdDialog, $mdToast) {
    var timerToString;
    timerToString = function(timer) {
      var minutes, seconds;
      minutes = '' + Math.floor(timer / 60);
      seconds = '' + timer % 60;
      if (minutes.length === 1) {
        minutes = '0' + minutes;
      }
      if (seconds.length === 1) {
        seconds = '0' + seconds;
      }
      return minutes + ':' + seconds;
    };
    $scope.vmIsRunning = false;
    $scope.sessionsAvailable;
    $scope.osList;
    $scope.currentOs;
    os.getList().then(function(osList) {
      $scope.osList = osList;
    });
    socket.on('available-sessions', function(data) {
      $scope.sessionsAvailable = data.sessions;
      $scope.$apply();
    });
    socket.on('session-timer', function(data) {
      $scope.timer = timerToString(data.timer);
    });
    socket.on('session-expired', function() {
      $mdToast.show($mdToast.simple().content('Session expired!').position('right bottom').hideDelay(2000));
      $scope.vmIsRunning = false;
      $scope.title = 'Select an OS';
    });
    $scope.toggleSidenav = function(menuId) {
      $mdSidenav(menuId).toggle();
    };
    $scope.title = 'Select an OS';
    $scope.changeOS = function(os) {
      $scope.title = os.title;
      $scope.currentOs = os;
      $scope.$broadcast('start-os-loading', os);
    };
    $scope.showInfo = function() {
      $mdDialog.show($mdDialog.alert().clickOutsideToClose(true).title('Boot info').content('Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.').ariaLabel($scope.currentOs.title + ' info').ok('Got it!'));
    };
    $scope.$on('first-frame', function(event, data) {
      var canvas;
      $scope.$broadcast('stop-os-loading');
      $scope.vmIsRunning = true;
      canvas = document.getElementById('screen');
      canvas.focus();
    });
  });

  app.controller('VmController', function($scope, $timeout, $http, $interval, $rootScope, os, socket) {
    var canvas, getMousePositionOnCanvas, handleKeydown, handleMouse2Down, handleMouseDown, handleMouseMove, handleMouseUp, initializeSocket, isCapslock, mouseDown, timer;
    mouseDown = 0;
    timer = 600;
    canvas = document.getElementById('screen');
    initializeSocket = function() {
      var canvas;
      var ctx;
      canvas = document.getElementById('screen');
      canvas.tabIndex = 1000;
      ctx = canvas.getContext('2d');
      socket.on('init', function(data) {
        canvas.width = data.width;
        canvas.height = data.height;
        canvas.addEventListener('keydown', handleKeydown);
        canvas.addEventListener('mousedown', handleMouseDown);
        canvas.addEventListener('mouseup', handleMouseUp);
        canvas.addEventListener('mousemove', handleMouseMove);
        $scope.vmIsRunning = true;
      });
      socket.on('frame', function(data) {
        var base64, bdata, binaryString, blob, i, image, uInt8Array, urlBlob;
        image = new Image;
        blob = new Blob([data.image], {
          type: 'image/jpeg'
        });
        urlBlob = URL.createObjectURL(blob);
        uInt8Array = new Uint8Array(data.image);
        i = uInt8Array.length;
        binaryString = [i];
        while (i--) {
          binaryString[i] = String.fromCharCode(uInt8Array[i]);
        }
        bdata = binaryString.join('');
        base64 = window.btoa(bdata);
        if (data.width === 640 && data.height === 480) {
          canvas.width = 640;
          canvas.height = 480;
        }
        image.src = 'data:image/jpeg;base64,' + base64;
        image.onload = function() {
          ctx.drawImage(image, data.x, data.y, data.width, data.height);
          $rootScope.$broadcast('first-frame');
        };
      });
    };
    handleMouseMove = function(e) {
      var pos;
      pos = getMousePositionOnCanvas(e);
      socket.emit('mouse', {
        x: pos.x,
        y: pos.y,
        isDown: mouseDown
      });
    };
    handleMouseDown = function(e) {
      var pos;
      pos = getMousePositionOnCanvas(e);
      socket.emit('mouse', {
        x: pos.x,
        y: pos.y,
        isDown: 1
      });
    };
    handleMouse2Down = function(e) {
      var pos;
      pos = getMousePositionOnCanvas(e);
      socket.emit('mouse', {
        x: pos.x,
        y: pos.y,
        isDown: 2
      });
    };
    handleMouseUp = function(e) {
      var pos;
      pos = getMousePositionOnCanvas(e);
      socket.emit('mouse', {
        x: pos.x,
        y: pos.y,
        isDown: 0
      });
    };
    getMousePositionOnCanvas = function(e) {
      var mouseX, mouseY;
      mouseX = void 0;
      mouseY = void 0;
      if (e.offsetX) {
        mouseX = e.offsetX;
        mouseY = e.offsetY;
      } else if (e.layerX) {
        mouseX = e.layerX;
        mouseY = e.layerY;
      }
      return {
        x: mouseX,
        y: mouseY
      };
    };
    handleKeydown = function(event) {
      if (event.keyCode === 8) {
        event.preventDefault();
      }
      socket.emit('keydown', {
        key: codeConvert(event.keyCode)
      });
    };
    isCapslock = function(e) {
      var charCode, shifton;
      e = e ? e : window.event;
      charCode = false;
      if (e.which) {
        charCode = e.which;
      } else if (e.keyCode) {
        charCode = e.keyCode;
      }
      shifton = false;
      if (e.shiftKey) {
        shifton = e.shiftKey;
      } else if (e.modifiers) {
        shifton = !!(e.modifiers & 4);
      }
      if (charCode >= 97 && charCode <= 122 && shifton) {
        return false;
      }
      if (charCode >= 65 && charCode <= 90 && shifton) {
        return true;
      }
      return false;
    };
    $scope.vmIsRunning = false;
    $scope.timer = '10:00';
    initializeSocket();
    $scope.$on('start-os-loading', function(event, os) {
      var restartVm;
      restartVm = function() {
        socket.emit('start', os);
        socket.removeListener('machine-closed', restartVm);
      };
      if (!$scope.vmIsRunning) {
        socket.emit('start', os);
      } else {
        socket.emit('stop');
        socket.on('machine-closed', restartVm);
      }
    });
    canvas.addEventListener('keydown', function(e) {
      if (e.keyCode === 8) {
        e.preventDefault();
      }
    });
    canvas.addEventListener('contextmenu', (function(e) {
      e.preventDefault();
      handleMouse2Down(e);
    }), false);
    document.body.onmousedown = function() {
      mouseDown = 1;
    };
    document.body.onmouseup = function() {
      mouseDown = 0;
    };
    $scope.stopMachine = function() {
      socket.emit('stop');
    };
    $scope.$on('$destroy', function() {
      canvas.removeEventListener('mousemove', handleMouseMove);
      canvas.removeEventListener('keydown', handleKeydown);
      canvas.removeEventListener('mousedown', handleMouseDown);
      canvas.removeEventListener('mouseup', handleMouseUp);
      socket.emit('close');
    });
  });

  app.controller('ConsoleController', function($scope, $http, $interval, $rootScope) {
    var command, consoleElement, intervalPromise, loadingAnimation, print, printOsList, runInputHint, runLoading, stopLoading;
    runLoading = function() {
      $interval(loadingAnimation, 80);
    };
    stopLoading = function() {
      $interval.cancel(loadingAnimation);
    };
    runInputHint = function() {
      return $interval((function() {
        if ($scope.userInput === '') {
          $scope.userInput = '_';
        } else if ($scope.userInput === '_') {
          $scope.userInput = '';
        }
      }), 1000);
    };
    loadingAnimation = function() {
      switch ($scope.loadingSymbol) {
        case '|':
          $scope.loadingSymbol = '/';
          break;
        case '/':
          $scope.loadingSymbol = '-';
          break;
        case '-':
          $scope.loadingSymbol = '\\';
          break;
        case '\\':
          $scope.loadingSymbol = '|';
      }
    };
    command = function() {
      var input, key, osToLaunch, p, span, spanReplace;
      input = document.getElementById('consoleInput');
      spanReplace = document.createElement('span');
      spanReplace.appendChild(document.createTextNode(input.value));
      consoleElement.appendChild(spanReplace);
      switch ($scope.userInput) {
        case 'oslist':
          printOsList();
          break;
        case 'doge':
          print('Such command, very useful, wow.');
          break;
        default:
          osToLaunch = null;
          for (key in $scope.osList) {
            key = key;
            if ($scope.userInput === $scope.osList[key].consoleTitle) {
              osToLaunch = $scope.osList[key];
            }
          }
          if (osToLaunch) {
            $rootScope.$broadcast('start-os-loading', osToLaunch);
            print('Wait for the magic to happen...');
          } else {
            p = document.createElement('p');
            p.appendChild(document.createTextNode('Sorry, I can\'t help you with that.'));
            consoleElement.appendChild(p);
          }
          break;
      }
      $scope.userInput = '';
      span = document.createElement('span');
      span.appendChild(document.createTextNode('user:~ '));
      consoleElement.appendChild(span);
      consoleElement.appendChild(input);
      input.focus();
    };
    print = function(string) {
      var p;
      p = document.createElement('p');
      p.appendChild(document.createTextNode(string));
      consoleElement.appendChild(p);
    };
    printOsList = function() {
      var key, p, table, td, tr;
      p = document.createElement('p');
      table = document.createElement('table');
      table.setAttribute('class', 'consoleHighlight');
      tr = document.createElement('tr');
      for (key in $scope.osList) {
        key = key;
        td = document.createElement('td');
        td.appendChild(document.createTextNode($scope.osList[key].consoleTitle));
        tr.appendChild(td);
      }
      table.appendChild(tr);
      p.appendChild(table);
      consoleElement.appendChild(p);
    };
    $scope.userInput = '';
    $scope.loadingSymbol = '|';
    $http.get('/api/os').then(function(response) {
      $scope.osList = response.data;
    });
    consoleElement = document.getElementById('consoleBody');
    intervalPromise = runInputHint();
    $scope.$on('start-os-loading', function(event, os) {
      $scope.isLoading = true;
      runLoading();
    });
    $scope.$on('stop-os-loading', function(event, data) {
      $scope.isLoading = false;
      stopLoading();
    });
    $scope.enterPress = function() {
      command();
    };
    $scope.setFocus = function() {
      document.getElementById('consoleInput').focus();
    };
    document.getElementById('consoleInput').onfocus = function() {
      if ($scope.userInput === '_') {
        $scope.userInput = '';
      }
      $interval.cancel(intervalPromise);
    };
    document.getElementById('consoleInput').onblur = function() {
      if ($scope.userInput === '') {
        intervalPromise = runInputHint();
      }
    };
  });

  app.directive('enterPress', function() {
    return function(scope, element, attrs) {
      element.bind('keydown keypress', function(event) {
        if (event.which === 13) {
          scope.$apply(function() {
            scope.$eval(attrs.enterPress);
          });
          event.preventDefault();
        }
      });
    };
  });

  app.controller('AdminController', function($scope, $mdDialog, os) {
    var socket, url;
    url = location.origin + '/admin';
    socket = io.connect(url);
    $scope.clients = [];
    os.getList().then(function(osList) {
      $scope.osList = osList;
    });
    $scope.showModifyOsDialog = function(event, os) {
      var DialogController;
      DialogController = function($scope, $mdDialog) {
        $scope.cancel = function() {
          $mdDialog.hide();
        };
        $scope.confirm = function(os) {
          $mdDialog.hide();
          $scope.modifyOs(os);
        };
      };
      $scope.os = os;
      $mdDialog.show({
        controller: DialogController,
        templateUrl: 'partials/modify-os-form.jade',
        clickOutsideToClose: true,
        scope: $scope,
        preserveScope: true,
        targetEvent: event
      });
    };
    $scope.showNewOsDialog = function(event) {
      var DialogController;
      DialogController = function($scope, $mdDialog) {
        $scope.cancel = function() {
          $mdDialog.hide();
        };
        $scope.confirm = function(os) {
          $mdDialog.hide();
          $scope.addOs(os);
        };
      };
      $mdDialog.show({
        controller: DialogController,
        templateUrl: 'partials/new_os.jade',
        clickOutsideToClose: true,
        scope: $scope,
        preserveScope: true,
        targetEvent: event
      });
    };
    $scope.addOs = function(newOs) {
      os.post(newOs).then(function() {
        $scope.osList.push(newOs);
      });
    };
    $scope.modifyOs = function(modOs) {
      os.put(modOs);
    };
    $scope.deleteOs = function(delOs) {
      os["delete"](delOs).then(function() {
        $scope.osList.splice($scope.osList.indexOf(delOs), 1);
        $scope.$apply();
      });
    };
    $scope.noSessionsRunning = function() {
      if ($scope.clients.length === 0) {
        return true;
      } else {
        return false;
      }
    };
    socket.on('available-sessions', function(data) {
      $scope.sessions = data.sessions;
      $scope.$apply();
    });
    socket.on('clients', function(clients) {
      $scope.clients = clients;
      $scope.$apply();
    });
    socket.on('new-client', function(client) {
      $scope.clients.push(client);
      $scope.$apply();
    });
    socket.on('remove-client', function(client) {
      $scope.clients.splice($scope.clients.indexOf(client), 1);
      $scope.$apply();
    });
  });

}).call(this);
